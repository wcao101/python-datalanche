#!/bin/bash

#host api.datalanche.com

# cd into the examples/schema subdirectory to match the config.json on the example
# file
cd ./examples/schema

# setup the config.json for production_server test
if [ ! -f ../config.json ]; then \
    echo  setup the config.json for production_server test; \
    bash -c "cp ../config/config_production ../config.json"; \
else \ 
    echo remove the old config.json; \
    bash -c "rm ../config.json"; \
    echo copy the production config.json into example folder; \
    bash -c "cp ../config/config_production ../config.json"; \
fi \

echo
echo Make sure the previous databases name is changed back to my_database
# make sure the previous database's name is changed back to my_database
curl https://api.datalanche.com/query -X POST -u "GoyY7hI2S5igDS4pG2Vdyg==:e02C96sqR5mvUoQXkCC2Gg==" -H "Content-Type: application/json" -d '{
                        "alter_database": "my_new_database",
                        "rename_to": "my_database"
                      }' 
echo
echo make sure previous schemas are cleaned up before examples testing
# make sure previous schemas are cleaned up before examples testing
curl https://api.datalanche.com/my_database/query -X POST -u "GoyY7hI2S5igDS4pG2Vdyg==:e02C96sqR5mvUoQXkCC2Gg==" -H "Content-Type: application/json" -d '{
                        "drop_schema": "my_schema",
                        "cascade": true
                      }'
echo
echo make sure the previous alterred schemas are cleaned up before examples testing
# make sure the previous alterred schemas are cleaned up before examples testing
curl https://api.datalanche.com/my_database/query -X POST -u "GoyY7hI2S5igDS4pG2Vdyg==:e02C96sqR5mvUoQXkCC2Gg==" -H "Content-Type: application/json" -d '{
                        "drop_schema": "my_new_schema",
                        "cascade": true
                      }'

# schema examples
# create a schema
echo
echo create a schema
python ../schema/create_schema.py

# describe the schema
echo
echo describe the schema
python ../schema/describe_schema.py

# show the created schema
echo
echo show schemas created in my_database
python ../schema/show_schemas.py

# table examples
# create a table
echo
echo testing creation of a new table with the name of my_table
python ../table/create_table.py

# describe the table
echo
echo testing description of the table
python ../table/describe_table.py

# show the tables in my_database, should return 2 tables
echo
echo testing showing the created tables
python ../table/show_tables.py

# insert data into my_schema.my_table
echo
echo testing insertion of the values into my_table
python ../table/insert.py

# testing select example
echo
echo testing select all example
python ../table/select_all.py

# testing select_search example
echo
echo testing select search example
python ../table/select_search.py

# create sample tables for select_joint
sh ../../create_sample_tables

# testing select_join example
echo
echo testing select join example
python ../table/select_join.py

# update my_schema.my_table
echo
echo testing updating my_table
python ../table/update.py

# delete my_schema.my_table
echo
echo testing deletion of my_table
python ../table/delete.py

# alther the table name and the table descriptions
echo
echo testing alterring my_table including alterring my_schema to my_new_schema
python ../table/alter_table.py

# create table again after altering table.
echo
echo create table again so as to test droping table
python ../table/create_table.py

# drop my_schema.my_table
echo
echo testing dropping my_table
python ../table/drop_table.py
