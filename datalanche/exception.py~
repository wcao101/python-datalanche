# -*- coding: utf-8 -*-

from filter import DLFilter
from filter import DLFilterOps
import json
import requests

class DLReadParams(object):
    def __init__(self,
        fields = None,
        filter = None,
        limit = None,
        skip = None,
        sort = None,
        total = None):

        self.fields = fields
        self.filter = filter
        self.limit = limit
        self.skip = skip
        self.sort = sort
        self.total = total

    def sort_asc(self, field):
        if self.sort == None:
            self.sort = list()
        self.sort.append(field + ':asc')

    def sort_desc(self, field):
        if self.sort == None:
            self.sort = list()
        self.sort.append(field + ':desc')

class DLException(Exception):
    def __init__(self, status_code, response, url):
        self.status_code = status_code
        self.response = response
        self.url = url
        exception = {
            'status_code': status_code,
            'response': response,
            'url': url
        }
        Exception.__init__(self, exception)

class DLConnection(object):
    def __init__(self):
        self.auth_key = ''
        self.auth_secret = ''
        #self.url = 'http://api.datalanche.com'
        self.url = 'http://localhost:3000'

    def authenticate(self, key, secret):
        self.auth_key = key
        self.auth_secret = secret
        # TODO: perform OAuth
        
    def get_list(self):
        url = self.url + '/list'
        parameters = { 'key': self.auth_key }

        r = requests.get(url, params = parameters)
        if not 200 <= r.status_code < 300:
            raise DLException(r.status_code, r.json(), r.url)
        return r.json()

    def get_schema(self, dataset_name):
        url = self.url + '/' + dataset_name + '/schema'
        parameters = { 'key': self.auth_key }

        r = requests.get(url, params = parameters)
        if not 200 <= r.status_code < 300:
            raise DLException(r.status_code, r.json(), r.url)
        return r.json()

    def read(self, dataset_name, params = None):
        url = self.url + '/' + dataset_name + '/read'

        parameters = { 'key': self.auth_key }

        if params and params.fields != None:
            parameters['fields'] = ','.join(params.fields)
        if params and params.filter != None:
            parameters['filter'] = str(params.filter)
        if params and params.limit != None:
            parameters['limit'] = params.limit
        if params and params.skip != None:
            parameters['skip'] = params.skip
        if params and params.sort != None:
            parameters['sort'] = ','.join(params.sort)
        if params and params.total != None:
            parameters['total'] = str(params.total).lower()

        r = requests.get(url, params = parameters)
        if not 200 <= r.status_code < 300:
            raise DLException(r.status_code, r.json(), r.url)
        return r.json()

connection = DLConnection()
connection.authenticate('16YNL0N2QVS9kx2y07MgcA==', '')

response = connection.get_list()
print 'get_list'
print '---------------------------'
print json.dumps(response, sort_keys = False, indent = 4)

response = connection.get_schema('home_health_directory')
print '\nget_schema'
print '---------------------------'
print json.dumps(response, sort_keys = False, indent = 4)

readFilter = DLFilter(
    DLFilter(
        DLFilter('zip_code', DLFilterOps.EQ, 16063),
        DLFilterOps.OR,
        DLFilter('zip_code', DLFilterOps.EQ, 45069)),
    DLFilterOps.AND,
    DLFilter('city', DLFilterOps.EQ, 'West Chester'))

params = DLReadParams()
params.fields = ['city', 'phone_number', 'zip_code']
params.limit = 3
params.skip = 0
params.total = True
params.sort_desc('city')
params.sort_asc('phone_number')
params.filter = readFilter

try:
    response = connection.read('home_health_directory', params)
    print '\nread'
    print '---------------------------'
    print json.dumps(response, sort_keys = False, indent = 4)
except DLException as e:
    print repr(e)

