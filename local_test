#!/bin/bash                                                                                                                                                     
#host localhost

# cd into the examples/schema subdirectory to match the config.json on the example
# file
cd ./examples_local_test/schema

# setup the config.json for production_server test
if [ ! -f ../config.json ]; then \
echo  setup the config.json for localhost_server test; \
bash -c "cp ../config/config_localhost ../config.json"; \
else \ 
echo remove the old config.json \
bash -c "rm ../config.json"; \
bash -c "cp ../config/config_localhost ../config.json"; \
fi \

# for localhost 
echo
echo Make sure the previous database's name is changed back to my_database
# make sure the previous database's name is changed back to my_database
curl https://localhost:4001/query -k -X POST -u "xeeFjAIlQMi/E+q4uFe1Rg==:6X3eolu/QFyds2BpJdMONg==" -H "Content-Type: application/json" -d '{
                        "alter_database": "my_new_database",
                        "rename_to": "my_database"
                      }' 
echo
echo make sure previous schemas are cleaned up before examples testing
# make sure previous schemas are cleaned up before examples testing
curl https://localhost:4001/my_database/query -k -X POST -u "xeeFjAIlQMi/E+q4uFe1Rg==:6X3eolu/QFyds2BpJdMONg==" -H "Content-Type: application/json" -d '{
                        "drop_schema": "my_schema",
                        "cascade": true
                      }'
echo
echo make sure the previous alterred schemas are cleaned up before examples testing
# make sure the previous alterred schemas are cleaned up before examples testing
curl https://localhost:4001/my_database/query -k -X POST -u "xeeFjAIlQMi/E+q4uFe1Rg==:6X3eolu/QFyds2BpJdMONg==" -H "Content-Type: application/json" -d '{
                        "drop_schema": "my_new_schema",
                        "cascade": true
                      }'
# schema examples
# create a schema
echo
echo create a schema
python ../schema/create_schema.py

# describe the schema
echo
echo describe the schema
python ../schema/describe_schema.py

# show the created schema
echo
echo show schemas created in my_database
python ../schema/show_schemas.py

# table examples
# create a table
echo
echo testing creation of a new table with the name of my_table
python ../table/create_table.py

# describe the table
echo
echo testing description of the table
python ../table/describe_table.py

# show the tables in my_database, should return 2 tables
echo
echo testing showing the created tables
python ../table/show_tables.py

# insert data into my_schema.my_table
echo
echo testing insertion of the values into my_table
python ../table/insert.py

# testing select example
echo
echo testing select all example
python ../table/select_all.py

# testing select_search example
echo
echo testing select search example
python ../table/select_search.py

# create sample tables for select_joint
sh ../../create_sample_tables_local

# testing select_join example
echo
echo testing select join example
python ../table/select_join.py

# update my_schema.my_table
echo
echo testing updating my_table
python ../table/update.py

# delete my_schema.my_table
echo
echo testing deletion of my_table
python ../table/delete.py

# alther the table name and the table descriptions
echo
echo testing alterring my_table including alterring my_schema to my_new_schema
python ../table/alter_table.py

# create table again after altering table.
echo
echo create table again so as to test droping table
python ../table/create_table.py

# drop my_schema.my_table
echo
echo testing dropping my_table
python ../table/drop_table.py

echo
echo drop the schema: my_new_schema before testing alter_schema example
#echo drop the schema: my_new_schema before testing alter_schema example
curl https://localhost:4001/my_database/query -k -X POST -u "xeeFjAIlQMi/E+q4uFe1Rg==:6X3eolu/QFyds2BpJdMONg==" -H "Content-Type: application/json" -d '{
"drop_schema": "my_new_schema",
"cascade": true
}'

# alter my_schema to my_new_schema
echo
echo alter the schema from my_schema to my_new_schema
python ../schema/alter_schema.py

# show schema which should show my_new_schema
echo
echo testing show schema for making sure schema is alterred.
python ../schema/show_schemas.py

#create the schema again to test drop schema.
echo
echo create schema again to test dropping schema
python ../schema/create_schema.py

# show schema which should show my_schema and my_new_schema
echo
echo make sure my_schema is existed.
python ../schema/show_schemas.py

# drop my_schema
echo
echo testing droping schema
python ../schema/drop_schema.py

# show schema which should show new_schema only
echo
echo testing show schema for making sure my_schema is dropped.
python ../schema/show_schemas.py


# database examples
# describe the database
echo
echo testing describe database
python ../database/describe_database.py

# show the database
echo
echo testing showing database
python ../database/show_databases.py

# alther the database
echo
echo testing altering database
python ../database/alter_database.py

# show the database after altered
echo
echo testing show database, should display my_new_database
python ../database/show_databases.py

# alter the my_new_database to my_database
echo
echo  alter the my_new_database to my_database
curl https://localhost:4001/query -k -X POST -u "xeeFjAIlQMi/E+q4uFe1Rg==:6X3eolu/QFyds2BpJdMONg==" -H "Content-Type: application/json" -d '{
"alter_database": "my_new_database",
"rename_to": "my_database"
}'

# show the database to check if the database is altered back to my_database
echo
echo Make sure the name of my_new_database is changed back to my_database
python ../database/show_databases.py