#!/bin/bash                                                                                                                                                     
#host localhost

# cd into the examples/schema subdirectory to match the config.json on the example
# file
cd ./examples/schema

# setup the config.json for production_server test
if [ ! -f ../config.json ]; then \
    echo  setup the config.json for localhost_server test \
    cp ../config/config_localhost ../config.json \
else \ 
    echo remove the old config.json \
    rm ../config.json \
    echo copy the localhost config.json into example folder
    cp ../config/config_localhost ../config.json \
fi \

# for localhost 
echo Make sure the previous database's name is changed back to my_database
# make sure the previous database's name is changed back to my_database
curl https://localhost:4001/query -k -X POST -u "xeeFjAIlQMi/E+q4uFe1Rg==:6X3eolu/QFyds2BpJdMONg==" -H "Content-Type: application/json" -d '{
                        "alter_database": "my_new_database",
                        "rename_to": "my_database"
                      }' 
echo make sure previous schemas are cleaned up before examples testing
# make sure previous schemas are cleaned up before examples testing
curl https://localhost:4001/my_database/query -k -X POST -u "xeeFjAIlQMi/E+q4uFe1Rg==:6X3eolu/QFyds2BpJdMONg==" -H "Content-Type: application/json" -d '{
                        "drop_schema": "my_schema",
                        "cascade": true
                      }'
echo make sure the previous alterred schemas are cleaned up before examples testing
# make sure the previous alterred schemas are cleaned up before examples testing
curl https://localhost:4001/my_database/query -k -X POST -u "xeeFjAIlQMi/E+q4uFe1Rg==:6X3eolu/QFyds2BpJdMONg==" -H "Content-Type: application/json" -d '{
                        "drop_schema": "my_new_schema",
                        "cascade": true
                      }'

